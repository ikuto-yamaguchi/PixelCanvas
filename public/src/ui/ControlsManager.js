// UIÂà∂Âæ°ÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†
import { CONFIG } from '../../Config.js';

/**
 * UIÂà∂Âæ°Áµ±ÂêàÁÆ°ÁêÜ„ÇØ„É©„Çπ
 * „Ç´„É©„Éº„Éë„É¨„ÉÉ„Éà„ÄÅ„ÉÑ„Éº„É´„Éê„Éº„ÄÅ„Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫„Å™„Å©„ÇíÁµ±‰∏ÄÁÆ°ÁêÜ
 */
export class ControlsManager {
    constructor(stateManager) {
        this.stateManager = stateManager;
        
        // DOMË¶ÅÁ¥†
        this.colorPalette = document.getElementById('colorPalette');
        this.pixelCountDisplay = document.getElementById('pixelCount');
        this.gridToggle = document.getElementById('gridToggle');
        this.statusIndicator = document.getElementById('status');
        this.cooldownIndicator = document.getElementById('cooldownIndicator');
        
        // UIÁä∂ÊÖã
        this.currentColorIndex = 0;
        this.pixelCount = 0;
        this.isGridVisible = false;
        this.isOnline = navigator.onLine;
        
        // „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥ÁÆ°ÁêÜ
        this.cooldownEndTime = 0;
        this.cooldownTimer = null;
        
        this.initialize();
    }
    
    /**
     * ÂàùÊúüÂåñ
     */
    initialize() {
        this.setupColorPalette();
        this.setupToolbar();
        this.setupStatusDisplay();
        this.setupStateListeners();
        
        // ÂàùÊúüÁä∂ÊÖã„ÅÆÂêåÊúü
        this.syncWithState();
        
        console.log('üéÆ ControlsManager initialized');
    }
    
    /**
     * „Ç´„É©„Éº„Éë„É¨„ÉÉ„ÉàË®≠ÂÆö
     */
    setupColorPalette() {
        if (!this.colorPalette) {
            console.warn('üéÆ Color palette element not found');
            return;
        }
        
        // Êó¢Â≠ò„ÅÆ„Ç´„É©„Éº„Éú„Çø„É≥„Å´„Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº„ÇíËøΩÂä†
        const colorButtons = this.colorPalette.querySelectorAll('.color-button');
        
        colorButtons.forEach((button, index) => {
            button.addEventListener('click', () => {
                this.selectColor(index);
            });
            
            // „Ç´„É©„Éº„Ç§„É≥„Éá„ÉÉ„ÇØ„Çπ„ÇídataÂ±ûÊÄß„Å®„Åó„Å¶Ë®≠ÂÆö
            if (!button.dataset.color) {
                button.dataset.color = index.toString();
            }
        });
        
        // ÂàùÊúü„Ç´„É©„ÉºÈÅ∏Êäû
        this.selectColor(0);
        
        console.log(`üéÆ Color palette setup: ${colorButtons.length} colors`);
    }
    
    /**
     * „ÉÑ„Éº„É´„Éê„ÉºË®≠ÂÆö
     */
    setupToolbar() {
        // „Ç∞„É™„ÉÉ„Éâ„Éà„Ç∞„É´
        if (this.gridToggle) {
            this.gridToggle.addEventListener('click', () => {
                this.toggleGrid();
            });
        }
        
        // „Åù„ÅÆ‰ªñ„ÅÆ„ÉÑ„Éº„É´„Éú„Çø„É≥„Åå„ÅÇ„Çå„Å∞Ë®≠ÂÆö
        const toolButtons = document.querySelectorAll('[data-tool]');
        toolButtons.forEach(button => {
            const tool = button.dataset.tool;
            button.addEventListener('click', () => {
                this.selectTool(tool);
            });
        });
    }
    
    /**
     * „Çπ„ÉÜ„Éº„Çø„ÇπË°®Á§∫Ë®≠ÂÆö
     */
    setupStatusDisplay() {
        // ÂàùÊúüË°®Á§∫
        this.updatePixelCount(0);
        this.updateConnectionStatus(navigator.onLine);
        
        // „Ç™„É≥„É©„Ç§„É≥Áä∂ÊÖãÁõ£Ë¶ñ
        window.addEventListener('online', () => {
            this.updateConnectionStatus(true);
        });
        
        window.addEventListener('offline', () => {
            this.updateConnectionStatus(false);
        });
    }
    
    /**
     * Áä∂ÊÖãÁÆ°ÁêÜ„É™„Çπ„Éä„ÉºË®≠ÂÆö
     */
    setupStateListeners() {
        // „É¶„Éº„Ç∂„ÉºÁä∂ÊÖã„ÅÆÂ§âÊõ¥„ÇíÁõ£Ë¶ñ
        this.stateManager.addChangeListener((state, changedSections) => {
            if (changedSections.includes('user')) {
                this.syncUserState(state.user);
            }
            if (changedSections.includes('data')) {
                this.syncDataState(state.data);
            }
            if (changedSections.includes('connection')) {
                this.syncConnectionState(state.connection);
            }
        });
    }
    
    /**
     * „Ç´„É©„ÉºÈÅ∏Êäû
     */
    selectColor(colorIndex) {
        if (colorIndex < 0 || colorIndex >= CONFIG.PALETTE.length) {
            console.warn(`üéÆ Invalid color index: ${colorIndex}`);
            return;
        }
        
        // Ââç„ÅÆÈÅ∏Êäû„ÇíËß£Èô§
        const prevButton = this.colorPalette?.querySelector('.color-button.selected');
        if (prevButton) {
            prevButton.classList.remove('selected');
        }
        
        // Êñ∞„Åó„ÅÑÈÅ∏Êäû„ÇíÈÅ©Áî®
        const newButton = this.colorPalette?.querySelector(`[data-color="${colorIndex}"]`);
        if (newButton) {
            newButton.classList.add('selected');
        }
        
        this.currentColorIndex = colorIndex;
        
        // Áä∂ÊÖãÁÆ°ÁêÜ„Å´ÂèçÊò†
        this.stateManager.setCurrentColor(colorIndex);
        
        console.log(`üéÆ Color selected: ${colorIndex} (${CONFIG.PALETTE[colorIndex]})`);
    }
    
    /**
     * „Ç∞„É™„ÉÉ„ÉâË°®Á§∫Âàá„ÇäÊõø„Åà
     */
    toggleGrid() {
        this.isGridVisible = !this.isGridVisible;
        
        // „Éú„Çø„É≥„ÅÆÁä∂ÊÖãÊõ¥Êñ∞
        if (this.gridToggle) {
            this.gridToggle.classList.toggle('active', this.isGridVisible);
        }
        
        // Áä∂ÊÖãÁÆ°ÁêÜ„Å´ÂèçÊò†
        this.stateManager.updateSection('user', {
            preferences: {
                ...this.stateManager.getState('user').preferences,
                showGrid: this.isGridVisible
            }
        });
        
        console.log(`üéÆ Grid visibility: ${this.isGridVisible}`);
    }
    
    /**
     * „ÉÑ„Éº„É´ÈÅ∏Êäû
     */
    selectTool(toolName) {
        // Êó¢Â≠ò„ÅÆ„ÉÑ„Éº„É´ÈÅ∏Êäû„ÇíËß£Èô§
        const prevTool = document.querySelector('.tool-button.selected');
        if (prevTool) {
            prevTool.classList.remove('selected');
        }
        
        // Êñ∞„Åó„ÅÑ„ÉÑ„Éº„É´„ÇíÈÅ∏Êäû
        const newTool = document.querySelector(`[data-tool="${toolName}"]`);
        if (newTool) {
            newTool.classList.add('selected');
        }
        
        // Áä∂ÊÖãÁÆ°ÁêÜ„Å´ÂèçÊò†
        this.stateManager.updateSection('user', {
            currentTool: toolName
        });
        
        console.log(`üéÆ Tool selected: ${toolName}`);
    }
    
    /**
     * „Éî„ÇØ„Çª„É´Êï∞Ë°®Á§∫Êõ¥Êñ∞
     */
    updatePixelCount(count) {
        this.pixelCount = count;
        
        if (this.pixelCountDisplay) {
            // Êï∞ÂÄ§„Çí„Éï„Ç©„Éº„Éû„ÉÉ„Éà
            let displayText;
            if (count >= 1000000) {
                displayText = `${(count / 1000000).toFixed(1)}M px`;
            } else if (count >= 1000) {
                displayText = `${(count / 1000).toFixed(1)}k px`;
            } else {
                displayText = `${count} px`;
            }
            
            this.pixelCountDisplay.textContent = displayText;
        }
        
        console.log(`üéÆ Pixel count updated: ${count}`);
    }
    
    /**
     * Êé•Á∂öÁä∂ÊÖãË°®Á§∫Êõ¥Êñ∞
     */
    updateConnectionStatus(isOnline) {
        this.isOnline = isOnline;
        
        if (this.statusIndicator) {
            this.statusIndicator.classList.toggle('offline', !isOnline);
            this.statusIndicator.title = isOnline ? '„Ç™„É≥„É©„Ç§„É≥' : '„Ç™„Éï„É©„Ç§„É≥';
        }
        
        // Áä∂ÊÖãÁÆ°ÁêÜ„Å´ÂèçÊò†
        this.stateManager.updateConnection({ isOnline });
        
        console.log(`üéÆ Connection status: ${isOnline ? 'online' : 'offline'}`);
    }
    
    /**
     * „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥Ë°®Á§∫ÈñãÂßã
     */
    startCooldown(durationMs) {
        this.cooldownEndTime = Date.now() + durationMs;
        
        if (this.cooldownTimer) {
            clearInterval(this.cooldownTimer);
        }
        
        // „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥Ë°®Á§∫Êõ¥Êñ∞
        this.cooldownTimer = setInterval(() => {
            this.updateCooldownDisplay();
        }, 100);
        
        // „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥„Ç§„É≥„Ç∏„Ç±„Éº„Çø„ÉºË°®Á§∫
        if (this.cooldownIndicator) {
            this.cooldownIndicator.style.display = 'block';
        }
        
        console.log(`üéÆ Cooldown started: ${durationMs}ms`);
    }
    
    /**
     * „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥Ë°®Á§∫Êõ¥Êñ∞
     */
    updateCooldownDisplay() {
        const remaining = Math.max(0, this.cooldownEndTime - Date.now());
        
        if (remaining <= 0) {
            // „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥ÁµÇ‰∫Ü
            this.endCooldown();
            return;
        }
        
        if (this.cooldownIndicator) {
            const seconds = Math.ceil(remaining / 1000);
            this.cooldownIndicator.textContent = `${seconds}s`;
        }
    }
    
    /**
     * „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥ÁµÇ‰∫Ü
     */
    endCooldown() {
        if (this.cooldownTimer) {
            clearInterval(this.cooldownTimer);
            this.cooldownTimer = null;
        }
        
        if (this.cooldownIndicator) {
            this.cooldownIndicator.style.display = 'none';
            this.cooldownIndicator.textContent = '';
        }
        
        this.cooldownEndTime = 0;
        console.log('üéÆ Cooldown ended');
    }
    
    /**
     * „É¶„Éº„Ç∂„ÉºÁä∂ÊÖãÂêåÊúü
     */
    syncUserState(userState) {
        if (userState.currentColor !== this.currentColorIndex) {
            this.selectColor(userState.currentColor);
        }
        
        if (userState.preferences?.showGrid !== this.isGridVisible) {
            this.isGridVisible = userState.preferences.showGrid;
            if (this.gridToggle) {
                this.gridToggle.classList.toggle('active', this.isGridVisible);
            }
        }
    }
    
    /**
     * „Éá„Éº„ÇøÁä∂ÊÖãÂêåÊúü
     */
    syncDataState(dataState) {
        if (dataState.totalPixels !== this.pixelCount) {
            this.updatePixelCount(dataState.totalPixels);
        }
        
        // „É≠„Éº„Éá„Ç£„É≥„Ç∞Áä∂ÊÖã„ÅÆË°®Á§∫
        if (dataState.loadingProgress !== undefined) {
            this.updateLoadingProgress(dataState.loadingProgress);
        }
    }
    
    /**
     * Êé•Á∂öÁä∂ÊÖãÂêåÊúü
     */
    syncConnectionState(connectionState) {
        if (connectionState.isOnline !== this.isOnline) {
            this.updateConnectionStatus(connectionState.isOnline);
        }
        
        // „É™„Ç¢„É´„Çø„Ç§„É†Êé•Á∂öÁä∂ÊÖã„ÅÆË°®Á§∫
        if (this.statusIndicator) {
            const hasRealtimeConnection = connectionState.realtimeConnected;
            this.statusIndicator.classList.toggle('realtime-connected', hasRealtimeConnection);
        }
    }
    
    /**
     * „É≠„Éº„Éá„Ç£„É≥„Ç∞ÈÄ≤ÊçóË°®Á§∫
     */
    updateLoadingProgress(progress) {
        // „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº„Åå„ÅÇ„Çå„Å∞Êõ¥Êñ∞
        const progressBar = document.getElementById('loadingProgress');
        if (progressBar) {
            progressBar.style.width = `${progress}%`;
            progressBar.style.display = progress > 0 && progress < 100 ? 'block' : 'none';
        }
    }
    
    /**
     * Áä∂ÊÖã„Å®„ÅÆÂêåÊúü
     */
    syncWithState() {
        const state = this.stateManager.getState();
        
        this.syncUserState(state.user);
        this.syncDataState(state.data);
        this.syncConnectionState(state.connection);
    }
    
    /**
     * „Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà„Ç≠„ÉºÂá¶ÁêÜ
     */
    handleShortcut(key, ctrlKey = false) {
        if (ctrlKey) {
            switch (key) {
                case 'g':
                    this.toggleGrid();
                    return true;
                case 's':
                    // ‰øùÂ≠ò„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà
                    this.triggerSave();
                    return true;
            }
        } else {
            // Êï∞Â≠ó„Ç≠„Éº„Åß„Ç´„É©„ÉºÈÅ∏Êäû
            const colorIndex = parseInt(key);
            if (!isNaN(colorIndex) && colorIndex >= 0 && colorIndex <= 9) {
                this.selectColor(colorIndex);
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * ‰øùÂ≠ò„Éà„É™„Ç¨„Éº
     */
    triggerSave() {
        // ‰øùÂ≠ò„Ç§„Éô„É≥„Éà„ÇíÁô∫ÁÅ´
        this.stateManager.addNotification({
            type: 'info',
            message: '‰øùÂ≠ò‰∏≠...',
            duration: 2000
        });
        
        // ÂÆüÈöõ„ÅÆ‰øùÂ≠òÂá¶ÁêÜ„ÅØ‰ªñ„ÅÆ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅßÂÆüË°å
        document.dispatchEvent(new window.CustomEvent('pixelcanvas:save'));
    }
    
    /**
     * ÈÄöÁü•Ë°®Á§∫
     */
    showNotification(message, type = 'info', duration = 3000) {
        this.stateManager.addNotification({
            type,
            message,
            duration
        });
    }
    
    /**
     * „Ç®„É©„ÉºË°®Á§∫
     */
    showError(message, duration = 5000) {
        this.showNotification(message, 'error', duration);
    }
    
    /**
     * ÊàêÂäü„É°„ÉÉ„Çª„Éº„Ç∏Ë°®Á§∫
     */
    showSuccess(message, duration = 3000) {
        this.showNotification(message, 'success', duration);
    }
    
    /**
     * Áµ±Ë®àÊÉÖÂ†±ÂèñÂæó
     */
    getStats() {
        return {
            currentColorIndex: this.currentColorIndex,
            pixelCount: this.pixelCount,
            isGridVisible: this.isGridVisible,
            isOnline: this.isOnline,
            cooldownActive: this.cooldownEndTime > Date.now(),
            cooldownRemaining: Math.max(0, this.cooldownEndTime - Date.now())
        };
    }
    
    /**
     * Ë®≠ÂÆöÊõ¥Êñ∞
     */
    updateConfig(newConfig) {
        // ÂøÖË¶Å„Å´Âøú„Åò„Å¶Ë®≠ÂÆö„ÇíÊõ¥Êñ∞
        console.log('üéÆ ControlsManager config updated');
    }
    
    /**
     * Ëß£ÊîæÂá¶ÁêÜ
     */
    destroy() {
        // „ÇØ„Éº„É´„ÉÄ„Ç¶„É≥„Çø„Ç§„Éû„ÉºÂÅúÊ≠¢
        if (this.cooldownTimer) {
            clearInterval(this.cooldownTimer);
        }
        
        // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„ÉºÂâäÈô§
        window.removeEventListener('online', this.updateConnectionStatus);
        window.removeEventListener('offline', this.updateConnectionStatus);
        
        // Áä∂ÊÖãÁÆ°ÁêÜ„É™„Çπ„Éä„ÉºÂâäÈô§
        this.stateManager.removeChangeListener(this.syncWithState);
        
        console.log('üéÆ ControlsManager destroyed');
    }
}